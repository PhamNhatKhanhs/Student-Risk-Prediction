# app.py
import streamlit as st
import pandas as pd
import joblib
# from src import config # C√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu kh√¥ng d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ config ·ªü ƒë√¢y

# --- L·ªÜNH STREAMLIT ƒê·∫¶U TI√äN ---
st.set_page_config(
    page_title="D·ª± ƒëo√°n Nguy c∆° H·ªçc t·∫≠p", 
    page_icon="üéì", # Th√™m icon cho tab
    layout="wide"
)

# --- C·∫•u h√¨nh c√°c l·ª±a ch·ªçn cho categorical features ---
categorical_options = {
    'school': ['GP', 'MS'],
    'sex': ['F', 'M'],
    'address': ['U', 'R'], 
    'famsize': ['LE3', 'GT3'], 
    'Pstatus': ['T', 'A'], 
    'Mjob': ['teacher', 'health', 'services', 'at_home', 'other'],
    'Fjob': ['teacher', 'health', 'services', 'at_home', 'other'],
    'reason': ['home', 'reputation', 'course', 'other'],
    'guardian': ['mother', 'father', 'other'],
    'schoolsup': ['yes', 'no'],
    'famsup': ['yes', 'no'],
    'paid': ['yes', 'no'], 
    'activities': ['yes', 'no'], 
    'nursery': ['yes', 'no'], 
    'higher': ['yes', 'no'], 
    'internet': ['yes', 'no'], 
    'romantic': ['yes', 'no']
}

# --- T·∫£i m√¥ h√¨nh v√† danh s√°ch c·ªôt ---
MODEL_FILENAME = 'random_forest_pipeline.joblib' 
FEATURE_COLUMNS_FILENAME = 'feature_columns.joblib'

@st.cache_resource # Cache ƒë·ªÉ kh√¥ng t·∫£i l·∫°i m√¥ h√¨nh m·ªói l·∫ßn t∆∞∆°ng t√°c
def load_model_and_cols():
    try:
        pipeline = joblib.load(MODEL_FILENAME)
        feature_cols = joblib.load(FEATURE_COLUMNS_FILENAME)
        return pipeline, feature_cols
    except FileNotFoundError:
        return None, None
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c c√≥ th·ªÉ x·∫£y ra khi t·∫£i file
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh ho·∫∑c file c·ªôt: {e}")
        return None, None


pipeline, feature_columns = load_model_and_cols()

# --- Ti√™u ƒë·ªÅ v√† Gi·ªõi thi·ªáu ---
st.title("üéì H·ªá th·ªëng D·ª± ƒëo√°n Nguy c∆° H·ªçc t·∫≠p c·ªßa H·ªçc sinh")
st.markdown("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng d·ª± ƒëo√°n nguy c∆° h·ªçc t·∫≠p! 
C√¥ng c·ª• n√†y s·ª≠ d·ª•ng m√¥ h√¨nh Machine Learning (Random Forest) ƒë·ªÉ ∆∞·ªõc t√≠nh kh·∫£ nƒÉng m·ªôt h·ªçc sinh c√≥ th·ªÉ ƒë·∫°t k·∫øt qu·∫£ h·ªçc t·∫≠p th·∫•p (ƒëi·ªÉm cu·ªëi k·ª≥ m√¥n To√°n G3 < 10) d·ª±a tr√™n c√°c th√¥ng tin ƒë·∫ßu v√†o.
""")
st.markdown("---")


if pipeline is None or feature_columns is None:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh hu·∫•n luy·ªán ('{MODEL_FILENAME}') ho·∫∑c file danh s√°ch c·ªôt ('{FEATURE_COLUMNS_FILENAME}').")
    st.warning("Vui l√≤ng ch·∫°y `python main.py` trong th∆∞ m·ª•c d·ª± √°n ƒë·ªÉ hu·∫•n luy·ªán v√† l∆∞u m√¥ h√¨nh tr∆∞·ªõc khi ch·∫°y ·ª©ng d·ª•ng n√†y.")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c m√¥ h√¨nh

# --- Ph·∫ßn nh·∫≠p li·ªáu ---
with st.form(key="student_info_form"):
    st.subheader("üìù Vui l√≤ng nh·∫≠p th√¥ng tin c·ªßa h·ªçc sinh:")
    
    input_data = {}
    
    # S·ª≠ d·ª•ng st.expander ƒë·ªÉ gi·∫£i th√≠ch c√°c feature n·∫øu c·∫ßn
    with st.expander("üí° H∆∞·ªõng d·∫´n v·ªÅ c√°c y·∫øu t·ªë ƒë·∫ßu v√†o (Nh·∫•n ƒë·ªÉ xem)", expanded=False):
        st.markdown("""
        * **school**: Tr∆∞·ªùng h·ªçc (GP: Gabriel Pereira, MS: Mousinho da Silveira)
        * **sex**: Gi·ªõi t√≠nh (F: N·ªØ, M: Nam)
        * **age**: Tu·ªïi (15-22)
        * **address**: Khu v·ª±c s·ªëng (U: ƒê√¥ th·ªã, R: N√¥ng th√¥n)
        * **famsize**: Quy m√¥ gia ƒë√¨nh (LE3: <=3 ng∆∞·ªùi, GT3: >3 ng∆∞·ªùi)
        * **Pstatus**: T√¨nh tr·∫°ng s·ªëng chung c·ªßa cha m·∫π (T: S·ªëng c√πng, A: S·ªëng ri√™ng)
        * **Medu, Fedu**: H·ªçc v·∫•n c·ªßa m·∫π/cha (0: kh√¥ng, 1: ti·ªÉu h·ªçc, 2: THCS, 3: THPT, 4: sau ƒêH)
        * **Mjob, Fjob**: Ngh·ªÅ nghi·ªáp c·ªßa m·∫π/cha
        * **reason**: L√Ω do ch·ªçn tr∆∞·ªùng
        * **guardian**: Ng∆∞·ªùi gi√°m h·ªô
        * **traveltime**: Th·ªùi gian di chuy·ªÉn ƒë·∫øn tr∆∞·ªùng (1: <15ph, 2: 15-30ph, 3: 30ph-1h, 4: >1h)
        * **studytime**: Th·ªùi gian h·ªçc h√†ng tu·∫ßn (1: <2h, 2: 2-5h, 3: 5-10h, 4: >10h)
        * **failures**: S·ªë l·∫ßn thi tr∆∞·ª£t c√°c m√¥n tr∆∞·ªõc (0-4)
        * **schoolsup, famsup, paid, activities, nursery, higher, internet, romantic**: H·ªó tr·ª£ t·ª´ tr∆∞·ªùng/gia ƒë√¨nh, l·ªõp h·ªçc th√™m, ho·∫°t ƒë·ªông ngo·∫°i kh√≥a, m·∫´u gi√°o, mu·ªën h·ªçc cao h∆°n, internet, m·ªëi quan h·ªá t√¨nh c·∫£m (yes/no)
        * **famrel, freetime, goout, Dalc, Walc, health**: Quan h·ªá gia ƒë√¨nh, th·ªùi gian r·∫£nh, ƒëi ch∆°i, u·ªëng r∆∞·ª£u ng√†y th∆∞·ªùng/cu·ªëi tu·∫ßn, s·ª©c kh·ªèe (thang 1-5, t·ªá ƒë·∫øn t·ªët)
        * **absences**: S·ªë bu·ªïi v·∫Øng h·ªçc (0-93)
        * **G1, G2**: ƒêi·ªÉm gi·ªØa k·ª≥ 1 v√† gi·ªØa k·ª≥ 2 (0-20)
        """)

    col1, col2, col3 = st.columns(3) # Chia th√†nh 3 c·ªôt cho tho√°ng h∆°n

    # S·∫Øp x·∫øp input fields v√†o c√°c c·ªôt
    cols_for_layout = [col1, col2, col3]
    
    for i, feature in enumerate(feature_columns):
        target_col = cols_for_layout[i % 3] # Chia ƒë·ªÅu v√†o 3 c·ªôt

        # T·∫°o tooltips/captions cho m·ªôt s·ªë feature quan tr·ªçng ho·∫∑c kh√≥ hi·ªÉu
        help_text = None
        caption_text = None
        
        if feature == 'Medu': caption_text = "H·ªçc v·∫•n m·∫π (0-4)"
        elif feature == 'Fedu': caption_text = "H·ªçc v·∫•n cha (0-4)"
        elif feature == 'studytime': help_text = "1: <2h, 2: 2-5h, 3: 5-10h, 4: >10h / tu·∫ßn"
        elif feature == 'failures': help_text = "S·ªë l·∫ßn thi tr∆∞·ª£t c√°c m√¥n h·ªçc tr∆∞·ªõc (0-4)"
        elif feature == 'absences': help_text = "T·ªïng s·ªë bu·ªïi v·∫Øng m·∫∑t"
        elif feature == 'G1': help_text = "ƒêi·ªÉm gi·ªØa k·ª≥ 1 (0-20)"
        elif feature == 'G2': help_text = "ƒêi·ªÉm gi·ªØa k·ª≥ 2 (0-20)"


        if feature in categorical_options:
            input_data[feature] = target_col.selectbox(
                f"Ch·ªçn {feature}:", 
                options=categorical_options[feature],
                key=feature,
                help=help_text
            )
        elif feature in ['G1', 'G2']:
             input_data[feature] = target_col.number_input(
                f"Nh·∫≠p ƒëi·ªÉm {feature}:", 
                min_value=0, max_value=20, value=10, step=1, key=feature, help=help_text
            )
        elif feature == 'age':
            input_data[feature] = target_col.number_input(
                f"Nh·∫≠p {feature} (tu·ªïi):", 
                min_value=15, max_value=22, value=16, step=1, key=feature, help=help_text
            )
        elif feature == 'absences':
             input_data[feature] = target_col.number_input(
                f"Nh·∫≠p {feature} (bu·ªïi v·∫Øng):", 
                min_value=0, max_value=93, value=0, step=1, key=feature, help=help_text
            )
        elif feature in ['Medu', 'Fedu', 'traveltime', 'studytime', 'failures', 
                         'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health']:
            min_val, max_val, default_val = 1, 5, 3 
            if feature == 'failures': max_val, default_val, min_val = 4, 0, 0 # failures c√≥ th·ªÉ t·ª´ 0-4
            elif feature == 'traveltime': max_val, default_val = 4, 1
            elif feature == 'studytime': max_val, default_val = 4, 2
            
            input_data[feature] = target_col.number_input(
                f"Nh·∫≠p {feature}:",
                min_value=min_val,
                max_value=max_val, 
                value=default_val, 
                step=1, key=feature, help=help_text
            )
        else: 
            # D√†nh cho c√°c feature s·ªë kh√°c kh√¥ng c√≥ trong danh s√°ch tr√™n (√≠t kh·∫£ nƒÉng x·∫£y ra)
            input_data[feature] = target_col.number_input(f"Nh·∫≠p {feature}:", value=0, key=feature, help=help_text)
        
        if caption_text:
            target_col.caption(caption_text)

    submit_button = st.form_submit_button(label="üöÄ D·ª± ƒëo√°n Nguy c∆°", use_container_width=True)

# --- X·ª≠ l√Ω v√† hi·ªÉn th·ªã k·∫øt qu·∫£ ---
if submit_button:
    # S·∫Øp x·∫øp l·∫°i input_data theo th·ª© t·ª± c·ªßa feature_columns ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
    ordered_input_data = {col: input_data[col] for col in feature_columns}
    input_df = pd.DataFrame([ordered_input_data])

    st.markdown("---")
    st.subheader("üìà K·∫øt qu·∫£ D·ª± ƒëo√°n:")
    try:
        prediction_label = pipeline.predict(input_df)[0]
        prediction_proba = pipeline.predict_proba(input_df)[0] 

        risk_status_str = "‚ö†Ô∏è Nguy c∆° cao (G3 < 10)" if prediction_label == 1 else "‚úÖ An to√†n (G3 >= 10)"
        proba_risk = prediction_proba[1] # X√°c su·∫•t l√† Nguy c∆° cao (l·ªõp 1)
        
        # S·ª≠ d·ª•ng c·ªôt ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫πp h∆°n
        res_col1, res_col2 = st.columns([2,3])

        with res_col1:
            if prediction_label == 1:
                st.error(f"**Tr·∫°ng th√°i: {risk_status_str}**")
            else:
                st.success(f"**Tr·∫°ng th√°i: {risk_status_str}**")
        
        with res_col2:
            st.metric(label="X√°c su·∫•t l√† 'Nguy c∆° cao'", value=f"{proba_risk:.2%}")
            st.progress(proba_risk)
        
        st.markdown("---")
        st.subheader("üìù L·ªùi khuy√™n:")
        if proba_risk > 0.7:
            st.warning("H·ªçc sinh n√†y c√≥ nguy c∆° **r·∫•t cao** ƒë·∫°t k·∫øt qu·∫£ h·ªçc t·∫≠p th·∫•p. C·∫ßn c√≥ s·ª± quan t√¢m ƒë·∫∑c bi·ªát, t√¨m hi·ªÉu nguy√™n nh√¢n v√† x√¢y d·ª±ng k·∫ø ho·∫°ch h·ªó tr·ª£ c·ª• th·ªÉ t·ª´ gia ƒë√¨nh v√† nh√† tr∆∞·ªùng.")
        elif proba_risk > 0.4:
             st.info("H·ªçc sinh n√†y c√≥ **d·∫•u hi·ªáu nguy c∆°**. N√™n theo d√µi s√°t sao h∆°n, khuy·∫øn kh√≠ch tinh th·∫ßn h·ªçc t·∫≠p v√† t√¨m hi·ªÉu xem em c√≥ g·∫∑p kh√≥ khƒÉn g√¨ kh√¥ng ƒë·ªÉ h·ªó tr·ª£ k·ªãp th·ªùi.")
        else:
            st.balloons()
            st.info("H·ªçc sinh n√†y c√≥ v·∫ª ƒëang h·ªçc t·∫≠p t·ªët. H√£y ti·∫øp t·ª•c duy tr√¨ v√† khuy·∫øn kh√≠ch th√™m!")

    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        st.error("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã ƒë·∫ßu v√†o ƒë√£ cung c·∫•p.")

# --- Footer ---
st.markdown("---")
st.caption("Hackathon AI - 01/06/2025 | D·ª± √°n: D·ª± ƒëo√°n Nguy c∆° H·ªçc t·∫≠p c·ªßa H·ªçc sinh")